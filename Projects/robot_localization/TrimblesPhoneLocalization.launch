<?xml version="1.0"?>

<launch>
  <!-- Several Transforms to link up base_link coordinate system with those from the sensors -->
<!--NEED TO BE CHANGED FOR DIFFERENT SENSORS-->
 <node pkg="tf2_ros" type="static_transform_publisher" name="bl_android" args="0 0 0 0 0 0 1 base_link android_frame"/> 
 <node pkg="tf2_ros" type="static_transform_publisher" name="bl_world" args="0 0 0 0 0 0 1 base_link world"/> 
 <node pkg="tf2_ros" type="static_transform_publisher" name="bl_odom" args="0 0 0 0 0 0 1 odom base_link"/> 


  <!-- Kalman filter basic parameters -->
  <node pkg="robot_localization" type="ekf_localization_node"
     name="ekf_localization" clear_params="false">
    <param name="sensor_timeout" value="2.0"/>
    <param name="two_d_mode" value="true"/>
    <param name="map_frame" value="map"/>
    <param name="odom_frame" value="odom"/>
    <param name="base_link_frame" value="base_link"/>
    <param name="world_frame" value="odom"/>
    <param name="publish_tf" value="true"/>
    <param name="frequency" value="60"/>

<!-- [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is-->
<!-- exposed as a configuration parameter. This matrix represents the noise we add to the total error after each-->
<!-- prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.-->
<!-- However, if users find that a given variable is slow to converge, one approach is to increase the-->
<!-- process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error-->
<!-- to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are-->
<!-- ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if-->
<!-- unspecified.-->
    <rosparam param="process_noise_covariance">[1.5, 0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    1.5, 0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0.06, 0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0.03, 0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0.03, 0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0.06, 0,     0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0.025, 0,     0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0.025, 0,    0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0.04, 0,    0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0.01, 0,    0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0.01, 0,    0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0.02, 0,    0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.01, 0,    0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.01, 0,
                           0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0.015]</rosparam>





<!-- Basic setup for First Imu -->
<!--NEED TO RENAME FOR DIFFERENT SENSOR-->
    <param name="imu0" value="/kanaloa/android/imu_world"/>
    <!-- IMU measures orientation, angular velocity, and linear acceleration -->
    <rosparam param="imu0_config">[false, false, false,
                                   true,  true,  true,
                                   false,  false,  false,
                                   true,  true,  true,
                                   true,  true,  true]</rosparam>
    <param name="imu0_differential" value="false"/> 
<!--Removes gravity from imu readings, already accounted for in the phone setup-->
    <param name="imu0_remove_gravitational_acceleration" value="false"/>




<!--Basic setup for odometry data received from the NatSat transform-->
<!--DONT RENAME FOR DIFFERENT SENSOR-->
    <param name="odom0" value="odometry/gps"/>
    <!-- GPS only reliably measures absolute position -->
    <rosparam param="odom0_config">[true,  true,  true,
                                   false, false, false,
                                   false, false, false,
                                   false, false, false,
                                   false, false, false]</rosparam>
    <param name="odom0_differential" value="false"/>
    <param name="smooth_lagged_data" value="true"/>
    <param name="odom0_pose_rejection_threshold" value="22"/>
  </node>



<!-- NatSat transform node, collects GPS data and turns it into odom data for the filter to use --> 
  <node pkg="robot_localization" type="navsat_transform_node"
      name="navsat_transform_node" respawn="true" output="screen">


<!-- Renaming of imputs into the NavSat transform, requires Imu and GPS topics -->
<!--NEED TO RENAME FOR DIFFERENT SENSOR-->
    <remap from="/imu0/data" to="/kanaloa/android/imu_world" />
    <remap from="/gps/fix" to="/kanaloa/android/gps" />



<!--How often the NavSat transform will publish, set to 1 since that's how often we get new GPS data-->
    <param name="frequency" value="1"/>

 
<!--Adjusts the directions recieved from the magnetic compass, based on magntic field at current location on the Earth-->
<!--MAY NEED TO BE CHANGED DEPENDING ON DATA INPUT-->
    <param name="magnetic_declination_radians" value="0"/>


<!--Transform to the Universal Transverse Mercator coordinate system-->
    <param name="broadcast_utm_transform" value="true"/>
<!--Doesn't run until it gets data from the GPS-->
    <param name="wait_for_datum" value="false"/>









<!--Controls if NavSat gets its heading from IMU data or input odometry data, seems like it should work with IMU, but makes the transform crash-->
    <param name="use_odometry_yaw" value="true"/>








<!--Offset of the yaw depending on how the Imu is positioned-->
    <param name="yaw_offset" value="0"/>
<!--Publishes additional topic of filtered data in GPS form-->
    <param name="publish_filtered_gps" value="true"/>
<!--Set map and baselink to the same starting position-->
    <rosparam param="datum">[0.0, 0.0, 0.0, map, base_link]</rosparam>







<!--[sensor]_differential specifies if it needs to be intergrated differentially, or if data is compared to the last measurement, it is important that it is false for a GPS based odom-->
  <param name="odom0_differential" value="false"/>
  <param name="imu0_differential" value="true"/>
<!--[sensor]_reletive is similar to differential except rather than comparing to the previous measurement, everything is compared to the original measurement-->
  <param name="odom0_relative" value="false"/>
  <param name="imu0_relative" value="false"/>


<!--Additional topic that holds diagnostic information for debugging-->
  <param name="print_diagnostics" value="true"/>

<!--Lets you control the queue size, or how many messages are saved for the program to use later if it can't read them in time-->
  <param name="odom0_queue_size" value="10"/>
  <param name="imu0_queue_size" value="10"/>







  </node>
</launch>
